* Install Python 3.X or 2.X on your machine 
 - for windows update the PATH with python folder, Library, DDL and scripts
 - for mac, python is shipped with mac, but you can install the latest paython 3.X
  	* Once we have two versions on python you can create virtual env and use the version of python you need 
  	* to install virtual env:
  	 - install pip install virtualenv
  	 - create a virtual env with the version of python interested in
  	 - sudo virtualenv -p python3 /Users/gkiran/virtualEnvPy
  	 - Enter the virtial env as
  	 source <target folder>/bin/activate
  	 - To get out of the virtual env use deactivate

* To Install third party Library/ Install packages - they are third part libraries
	- To downlonad and add it to the project and use it in the files with the import keyword
	- PIP Is the python package manager, 	Use PIP to install packages, pip3 with python 3 :  Many packages can be found in the Python Package Index.
	- https://pypi.python.org/pypi Python Package Index (PyPI) is where users can add new pakages to community can be used by all
	- pip install <package name>
	- pip list : lists allpackages
	- pip show <package name> : shows more detail of the package
	- pip uninstall <package name>
	- pip search <package name>

* IDE for python 
	- use command line or a text editor and save file with .py file 
	- Anaconda Python 
	OR
	- Pycharm - Python community version 
* IPython - more intreactive package

* Python Identifier
	A Python identifier is a name used to identify a variable, function, class, module or other object. 
	An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).
	Class names start with an uppercase letter. All other identifiers start with a lowercase letter.
	Starting an identifier with a single leading underscore indicates that the identifier is private.
	Starting an identifier with two leading underscores indicates a strongly private identifier.If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.

* Lines and Indentation
	No braces to indicate the block of code but line indentations are used to enforce that
	line continuation character (\) to continue with a long line
* Python accepts single ('), double (") and triple (''' or """) quotes to denote string literals, as long as the same type of quote starts and ends the string.

* Comment:
	A hash sign (#) that is not inside a string literal begins a comment.		


* Variable 
	- x="text"
	  The text object has an object reference x
	- x=y=z=10
	OR
	  x,y,z=0

* Standard Data Types - the data stored in memory can be of many types 
	Python has 5 data types:
		1. NUMBERS
			python supports integer, float, long and complex number
				Number functions:
					- floor(x) lergest integer not greater than x, floor(110.25)=110
					- max(x,y,z..)
					- min(x,y,z..)
					- round(x,[n]) round(80.23456, 2) > 80.23
		2. STRINGS
			set of characters represented in the quotation marks
				str = 'Hello World!'
				print str          		# Prints complete string
				print str[0]       		# Prints first character of the string
				// String slicing in python uses the folliwng format
				x[startAt:endBefore:skip]				
				print str[2:5]     		# Prints characters starting from 3rd to 5th
				print str[2:]      		# Prints string starting from 3rd character
				print str[:2]      		# Prints string starting from 0 to 3rd character
				print str * 2      		# Prints string two times
				print str[:2] + "TEST" 	# Prints concatenated string : HelTEST
				print str[::2] 			# from begining and gets every 2nd element from 0 - HloWrd
				print str[1::3] 		# every third element starting from index 1
				// no reverse in python built in method
				print str[::-1] 		# This retruns a reverse string: !dlroW olleH
			 string format operator %
			 	print "My name is %s and weight is %d kg!" % ('Guru', 30)

			 	"This is a single\
 				string"				

 				"Another way to handle \"quotes\""		
 				"Need to use 'quotes' inside a string"
 			String functions
 				len(x)
 				upper(x)
 				lower(x)
 				join - joins a string into seq
 				replace(str, newStr)
 				strip('x')	removes all occurance of char x in the strings

		3. LISTS
			Similar to array and can cotaing data of any data type and its size can be changed or increased
				list = [ 'abcd', 786 , 2.23, 'john', 70.2 ]
				tinylist = [123, 'john']

				print list          	# Prints complete list
				print list[0]       	# Prints first element of the list
				print list[1:3]     	# Prints elements starting from 2nd till 3rd 
				print list[2:]      	# Prints elements starting from 3rd element
				print tinylist * 2  	# Prints list two times
				print list + tinylist 	# Prints concatenated lists
				del list1[2]			# Deletes the element
			List Functions
				pop - removes the last object from the list and returns it
				remove - remove the object from your list
				reverse
				sort
				count
				append - can add elements to list


		4.	TUPLES
				they are fixed set of lists and enclosed in () 
				It cannot be updated or changed
		5.	DICTIONARY

				They are just hash table with name value pair.

				dict = {}
				dict['one'] = "This is one"
				dict[2]     = "This is two"
				# Nester dictionary
				cars = {'bmw': {'model': '550i', 'year': 2016}, 'benz': {'model': 'E350', 'year': 2015}}
				// accessing that is easy:
				cars['bmw']['model'] # prints 550i

				tinydict = {'name': 'john','code':6734, 'dept': 'sales'}

				print dict['one']       # Prints value for 'one' key
				print dict[2]           # Prints value for 2 key
				print tinydict          # Prints complete dictionary
				print tinydict.keys()   # Prints all the keys
				print tinydict.values() # Prints all the values
* Operators
		- Arithmetic : +, -, * , / , % , ** (exponential), // Floor division 
		- Membership Operators : 
			This helps to assert the presence of character/element in a strings, list, tuples
				 in , not in
		- Identity Operators: asserts the objects
				 is, is not
* Decision Making and Loop 
	A group of individual statements, which make a single code block are called suites
	Compound or complex statements, such as if, while, def, and class require a header line and a suite.
	
		if expression : 
		   suite
		elif expression : 
		   suite 
		else : 
		   suite

	If there exits no suite,then single statement it can be placed in one line
		if expression : print "Only one line if true"

		while expression:
	   		statement(s)

   	The else statement is executed when the while expression is false
	   	while expression:
	   		statement(s)
	   	else :
	   		statement
	For loops	   		
		for iterating_var in sequence:
   			statements(s)

   		Python allows to Itrate over two lists or more list but itrates only till the index of the smalles list of all
   		for x,y,z in (list1, list2, list3)	


   	Break	
   		Stops execution of loop completely
   	continue
   		skip the rest of the statements and re run with next condition
   	pass
   		nothing happens when it executes, it is place holder for stubs or code that is not written still

* FUNCTIONS
	reusable set of code, python provides you with built in functions while a user can create a user defined fucntions as well

	Defining funtions

		def functionname( parameters ):
   			"function_docstring" // first line is an optional documentation string
   			function_suite
   			return [expression]
		
		Anonymous functions/Lambda function: 
			this is different to regular functions in the way we define it with the def keyword instead use Lambda
			the functions have no name and it always needs an exprerssion

			lambda [arg1 [,arg2,.....argn]]:expression
			// example
			sum = lambda arg1, arg2: arg1 + arg2;
			sum(10,20)

   	Calling a function
   		- with required arguments 
   			print("This is required") // print method is called with the string
   		- with Keyword: given a method with two or more parameters, you can pass the arguments with the keyword/name, this way you can place the arguments out of order
   			def employee(name, age, detail):
   				print("Employee name is:"+name+ " details"+detail)
   				print(" age is", age )

   			employee(age=10,name='test',detail='ages in the company')

   		- Default arguments: can define a method with default value 
   			def employee(age, name, detail="Not applicable"):
				print("Employee name is:"+name+ " details"+detail)
   				print(" age is", age )

   			employee(age=10,name='test',detail='ages in the company')
   			employee(age=10,name='test')

   		- Variable-length arguments 
   			def functionname([formal_args,] *var_args_tuple ):
   				"function_docstring"
   				function_suite
   				return [expression]

   			Note if more than the expected arguments are passed they are passed to the tuple
   	Return statment: if not mentioned will return NONE

* VARIABLE SCOPE
	Given a variable is declared our side the method its accessiable through out the code while with in the function its not.
	To access a global variable with in a function use keyword global
		a="Before method"
		print a // Before method
		def printSimple()
			a = "in function"
			print a // in function
			global a
			print a
			a="finally updated"
			// Note above cannot access 	
		printSimple()	
		print a //finally updated
